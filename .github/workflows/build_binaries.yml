name: Build and Release Rust Binary
on:
  workflow_dispatch:
  push:
    paths:
      - 'Cargo.toml'

jobs:
  check-release:
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository
        uses: actions/checkout@v3

      - name: Get version from Cargo.toml
        id: cargo
        run: |
          version=$(grep '^version = ' Cargo.toml | sed -E 's/version = "(.*)"/\1/')
          echo "version=$version" >> $GITHUB_ENV
          echo "Found version: $version"

      - name: Check if release exists
        id: check_release
        env:
          VERSION: ${{ env.version }}
        run: |
          if gh release view "v$VERSION" > /dev/null 2>&1; then
            echo "Release v$VERSION already exists. Skipping."
            exit 0
          fi

  build_linux:
    runs-on: ubuntu-latest
    needs: check-release
    steps:
      - name: Check out repository
        uses: actions/checkout@v3

      - name: Set up Rust
        uses: actions-rust-lang/setup-rust-toolchain@v1

      - name: Build for Linux
        run: cargo build --release

      - name: Zip Linux Binary
        run: |
          mv target/release/drops-client drops-client
          zip linux.zip drops-client
        shell: bash

      - name: Upload Linux Binary
        uses: actions/upload-artifact@v4
        with:
          name: linux
          path: linux.zip

  build_windows:
    runs-on: windows-latest
    needs: check-release
    steps:
      - name: Check out repository
        uses: actions/checkout@v3

      - name: Set up Rust
        uses: actions-rust-lang/setup-rust-toolchain@v1

      - name: Build
        run: cargo build --release

      - name: Move and Rename Binary
        run: |
          Move-Item -Path target/release/drops-client.exe -Destination drops-client.exe
        shell: pwsh
      - name: Compress Binary
        run: Compress-Archive -Path drops-client.exe -DestinationPath windows.zip
        shell: pwsh

      - name: Upload Windows Binary
        uses: actions/upload-artifact@v4
        with:
          name: windows
          path: windows.zip

  build_macos:
    runs-on: macos-13
    needs: check-release
    steps:
      - name: Check out repository
        uses: actions/checkout@v3

      - name: Set up Rust
        uses: actions-rust-lang/setup-rust-toolchain@v1

      - name: Build for macOS
        run: cargo build --release

      - name: Zip macOS Binary
        run: |
          mv target/release/drops-client drops-client
          zip mac.zip drops-client
        shell: bash

      - name: Upload macOS Binary
        uses: actions/upload-artifact@v4
        with:
          name: mac
          path: mac.zip

  release:
    runs-on: ubuntu-latest
    needs: [ build_linux ]
    steps:
      - name: Check out repository
        uses: actions/checkout@v3
      - name: Download artifacts
        uses: actions/download-artifact@v4
      - name: Delete uploaded artifacts
        uses: geekyeggo/delete-artifact@v5
        with:
          name: |
            linux
            windows
            mac
      - name: Get version from Cargo.toml
        id: cargo
        run: |
          version=$(grep '^version = ' Cargo.toml | sed -E 's/version = "(.*)"/\1/')
          echo "version=$version" >> $GITHUB_ENV

      - name: Create GitHub Release
        id: create_release
        uses: ncipollo/release-action@v1
        with:
          tag: v${{ env.VERSION }} # Use the version from the file
          draft: false
          prerelease: false
          generateReleaseNotes: true
          artifacts: "linux/*.zip,windows/*.zip,mac/*.zip"
